●RNNのパラメータ


インプット　2015/1/5〜

学習とテストの境界　2018/6/1

RNNのセルは全結合層で、ニューロンの数   20

データ長さ 30

学習日付長さ  30

特徴量数   6

RNNセルの作成　２０？

バッチサイズ   16

学習回数  10000

乱数初期値   12345

-------------------------------------------------------

air_quality →　stock_series

tf.nn.rnn_cell.BasicRNNCellクラスを用いて、単純なRNNのモデルを作成する。
tf.nn.rnn_cell.BasicRNNCellクラスは、セルの内部構造が単層で全結合のニューラルネットワークを表すクラスである。
インスタンス化の際にニューロンの数をnum_units引数に、活性化関数をactivation引数に指定すればよい。activation引数は省略した場合は、tanh関数という-1〜1の範囲をとる関数がデフォルトで設定される。

stock_seriesデータセットのデータフレームへの読み込み

stock_seriesデータセットの可視化

グラフの外観のカスタマイズ

利用する列と順番を再定義してデータフレームを再構築
一部の列のみをデータ項目として利用するには、このコードを記述すればよい。


データセットを扱うための便利クラス

時系列データの学習では、連続したデータポイントを訓練データとする。連続したデータポイントをランダムに切り出すためのメソッドとしてnext_batchを作成している。
next_batchメソッドは、length引数とbatch_size引数をとり、ランダムな「連続したlength分のデータポイント」および「その次のデータポイント」を返す。


データセットを訓練（train）データと精度検証用のテスト（test）データに分離
データ分割： 
今回は
データセットを、訓練（train）データと、精度検証用のテスト（test）データに分離する


2018年6月1日より前のデータのみを訓練（train）時に利用し、以降のデータは予測の際にのみ利用する精度検証用のテスト（test）データとする。
訓練データから精度検証（validation）用データを切り分けずに、テストデータのみを精度検証に利用する。


セッションの開始と、各パラメーター＆入力プレースホルダーの定義
TensroFlowのセッションを開始し、各種パラメーターと、データ入力用のプレースホルダーを定義する

RNNのセルを定義
RNNのセルには、tf.rnn.rnn_cell.BasicRNNCellクラスを用いればよい。num_units引数に20（ニューロン）を指定し、activation引数は指定せずデフォルトのまま（tanh関数）とする。
RNNセルは再帰的にネットワークを構築するが、一番上のセル（tf.shape(x)[0]）に対する入力が必要となる（※前掲の図3には表現されていないので注意）。つまりRNNセルの初期状態（initial_state）について定義しなければならない。ここでは単純にゼロの初期状態を与えるものとし、BasicRNNCellクラスのzero_stateメソッドを用いる。
ネットワークの入出力はtf.nn.dynamic_rnnメソッドを使う。tf.nn.dynamic_rnn関数の戻り値は、各セルのニューロンの状態（outputs）と、最後のセルのニューロンの状態（last_state）である。これらを用いて、おのおのの出力を求めることができる。


全結合と最適化
最終的な出力――すなわち入力のSERIES_LENGTH(=30)の次の日――の予測値を、最適化に利用する



標準化のためのメソッドをまとめたクラス

RNNによる学習
学習を実行する


予測を行い、各日付の結果値を変数predict_stock_seriesに保存するコード
学習済みのモデルを用いて予測を行う。予測は、「予測対象となる日付の前３０日分のデータを入力データとして予測する」という操作を繰り返して行う


予測結果を可視化するサンプルコード

















